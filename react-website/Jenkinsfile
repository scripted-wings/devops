pipeline {
    agent any
    
    tools {
        nodejs 'nodejs'
        dockerTool 'docker'
    }
    
    environment {
        IMAGE_NAME = 'react-website'
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_REGISTRY = 'harrsh'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install pnpm') {
            steps {
                sh 'npm install -g pnpm'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('react-website') {
                    sh 'pnpm install --frozen-lockfile'
                }
            }
        }
        
        stage('Build React App') {
            steps {
                dir('react-website') {
                    sh 'pnpm run build'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('react-website') {
                    script {
                        docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                        docker.build("${IMAGE_NAME}:latest")
                    }
                }
            }
        }

        stage('Debug Branch') {
            steps {
                sh 'echo "Current branch: ${BRANCH_NAME}"'
                sh 'git branch -a'
            }
        }
        
        stage('Push to Registry') {
            when {
                branch 'master'
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                        docker.image("${IMAGE_NAME}:latest").push()
                    }
                }
            }
        }
        
        stage('Deploy') {
            when {
                branch 'master'
            }
            steps {
                script {
                    // Stop and remove existing container
                    sh 'docker stop react-website || true'
                    sh 'docker rm react-website || true'
                    
                    // Run new container
                    sh 'docker run -d --name react-website -p 3000:80 react-website:latest'
                    
                    // Verify deployment
                    sh 'sleep 5'
                    sh 'docker ps | grep react-website'
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}